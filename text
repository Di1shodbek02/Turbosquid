# Docker-compose
version: '3'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
    environment:
      - discovery.type=single-node
    mem_limit: 2g
  db:
    image: postgres:15.3-alpine
    container_name: db
    volumes:
      - pg_data:/var/lib/postgresql/data/
    ports:
      - '5432:5432'
    env_file:
      - ./.env
    environment:
      - POSTGRES_NAME=$DB_NAME
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASSWORD
      - POSTGRES_HOST=$DB_HOST
      - POSTGRES_PORT=$DB_PORT


  django:
    build: .
    container_name: django
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - '8000:8000'
    env_file:
      - ./.env
    environment:
      - DJANGO_DB_NAME=$DB_NAME
      - DJANGO_DB_USER=$DB_USER
      - DJANGO_DB_PASSWORD=$DB_PASSWORD
      - DJANGO_DB_HOST=$DB_HOST
      - DJANGO_DB_PORT=$DB_PORT
    depends_on:
      - db
      - celery
      - redis


  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data/
    expose:
      - 6379

  celery:
    build: .
    command: celery -A Turbosquid worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
volumes:
  pg_data:
  redis_data:



# Dockerfile

FROM python:3.11-alpine

WORKDIR /app

COPY . .

#COPY entrypoint.sh /app/entrypoint.sh
RUN pip install --upgrade pip
RUN pip install -r req.txt

RUN chmod +x ./entrypoint.sh
RUN sed -i 's/\r$//g' ./entrypoint.sh

ENTRYPOINT ["./entrypoint.sh"]




# entrypoint.sh:
#!/bin/sh

if [ "$DATABASE" = "postgres" ]
then
    echo "Waiting for postgres..."

    while ! nc -z $SQL_HOST $SQL_PORT; do
      sleep 0.1
    done

    echo "PostgreSQL started"
fi

exec "$@"





.env:
DB_NAME=turbosquid
DB_USER=postgres
DB_PASSWORD=1212
DB_HOST=db
DB_PORT=5432







# API lar
# class UpdateDestroyAPIView(RetrieveUpdateDestroyAPIView):
#     queryset = Product.objects.all()
#     serializer_class = ProductSerializerForPost
#     permission_classes = (IsAdminPermission,)


# class AddProductAPIView(CreateAPIView):
#     queryset = Product.objects.all()
#     serializer_class = ProductSerializerForPost
#     permission_classes = (IsAuthenticated,)


# class AddCategoryAPIView(CreateAPIView):
#     queryset = Category.objects.all()
#     permission_classes = (IsAuthenticated,)
#     serializer_class = CategorySerializer


# class ProductAPIView(ListAPIView):
#     queryset = Product.objects.all()
#     serializer_class = ProductSerializer
#     permission_classes = (IsAuthenticated,)






# class ProductLikeAPIView(GenericAPIView):
#     permission_classes = (IsAuthenticated,)
#     serializer_class = ProductLikeSerializer
#
#     def post(self, request):
#         user_id = request.POST.get('user_id')
#         product_id = request.POST.get('product_id')
#
#         try:
#             like = ProductLike.objects.create(
#                 user_id=user_id,
#                 product_id=product_id
#             )
#
#             product = Product.objects.get(id=product_id)
#             if like.is_like:
#                 product.likes += 1
#             else:
#                 product.likes -= 1
#
#             like.save()
#             product.save()
#
#         except Exception as e:
#             return Response({'success': False, 'message': str(e)}, status=400)
#
#         return Response({'success': True, 'message': 'Successfully added like/dislike'})


